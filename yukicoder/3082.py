def is_prime(n: int) -> bool:
    for i in range(2, n):
        if n % i == 0:
            return False
    return True


def prime_factorize(n: int) -> list[tuple[int, int]]:
    res = []
    p = 1
    while n > 1:
        p += 1
        if not is_prime(p):
            continue
        e = 0
        while n % p == 0:
            e += 1
            n //= p
        res.append((p, e))
    return res


x = 610722528172773309331163124607679434502229538537812202942095566515928424028516772777889996427204058501810285172188707341302334772421797512003797941384534586395699036583997524097230839302866788747940802167823094856057768176640768055137901665551432061804384892090804395747090733082076852300450868547623865126077086842041191497350292535020370875504191162828302745335475408775235132919130047177651038150821812748523067616267439460413841298648390571970168538136644545360957175124227607583176775736128270692542378414735652350804551948080526250307495656570544580685171658710286718908115614462348838246803085866380506878585878023462859542316067100194792182599273135074486777508654137996161038678012015762667635792181067119283622087968090509850025396601513100841577554629339593026537448027223411602891466202059955208862467140983945957545144799365446788631295319935098363916467385980851201306209132997567077342060223815719018162778963806443954570837224658685625347389771785429688198986030560610416717827569864327398963313744164052538549710422359059425329562019021837245873134894570267420677726901593629905893862688038282205702879569295937090063544780006055701533502424744164982611807605712697574055067747402402566416183036869736034435492600590954157674204477500466764285302030926237178419862398775040284612658924908609738628006592324310647748240376982615718234980715554936850388674061609745770841365328015210245376275038801966801857373023453760218561848437537098552962923341078595607987884072954898271465903606521724810444027357131938226153402779293477929719694776502897018428928146165741887162300326483995696784400783538407814875887901803693489421698350309589692442453332733725846998008188127543135002092666712312661819854909427713850131720643606219600460763297006892386620364787560821407554621227922197194309267365558485377914440044495326102349265845975211441135628991560316166078837097334
msg = ''
for p, e in prime_factorize(x):
    msg += chr(ord('A') + e - 1) if e != 0 else ' '
assert msg == 'AN INTEGER IS CALLED FOOL IFF ALL SUBSTRINGS ARE PRIMES  OUTPUT THE PRODUCT OF ALL FOOLS'

# foolは次の条件をみたす
# - 2, 3, 5, 7のみからなる
# - 2は先頭にしか来ない
# - 5は先頭にしか来ない
# - XXの並びは現れない (11で割り切れてしまう)
# - XYXYの並びは現れない (101で割り切れてしまう)
# したがって, 次のものに限定される
#       3,  7,  37,  73,  373,  737,
#   2, 23, 27, 237, 273, 2373, 2737,
#   5, 53, 57, 537, 573, 5373, 5737
# これらのうち実際にfoolであるものは
#   2, 3, 5, 7, 23, 37, 53, 73, 373

print(2 * 3 * 5 * 7 * 23 * 37 * 53 * 73 * 373)
